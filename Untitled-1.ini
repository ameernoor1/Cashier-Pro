 

أنت أداة لتوليد وتحديث كود واجهات ويب. لديك ملفان رئيسيان:

1. **index.html** — نظام الكاشير المتقدم (POS) يعمل محليًا بـ LocalStorage، ويحتوي قسم اشتراك يعرض حالة وتاريخ انتهاء ويستقبل “رمز اشتراك” للتفعيل، لكن دون ربط فعلي بقاعدة مركزية.
2. **code-generator.html** — نظام إدارة الاشتراكات المتقدم، متصل بـ **Firebase Realtime Database** ويولِّد رموز الاشتراك ويعرض إحصاءات ويقرأ/يكتب إلى مسارات مثل `subscriptionCodes` و`users`.

## المطلوب العام

* ربط **index.html** بقاعدة Firebase نفسها المستخدمة في **code-generator.html**.
* عند **أول تشغيل** للكاشير على أي جهاز: إظهار **شاشة ترحيب** ثم **صفحة تسجيل بيانات المستخدم** (بدون البريد الإلكتروني) وحفظها في Firebase تحت `users/<deviceId>`، بحيث تظهر مباشرة في لوحة الإدارة داخل **code-generator.html**.
* بعد التسجيل، يمكن للمدير من لوحة الإدارة إصدار/منح رمز تفعيل لهذا المستخدم (شهري/سنوي/مخصص). وعند قيام المستخدم بإدخال الرمز من داخل الكاشير، يتم **التحقق من الرمز** من قاعدة البيانات، وتحديث حالة الاشتراك محليًا وكتابيًا في Firebase (تاريخ الانتهاء، النوع، حالة الاستخدام).
* كل كاشير يعمل **بشكل فردي** على جهازه وله **deviceId** دائم (يُخزَّن في LocalStorage).
* يُحافظ على آلية التخزين المحلي للمنتجات والفواتير كما هي، مع ترك “نقطة توسيع” اختيارية للمزامنة مستقبلًا.

---

## تفاصيل التنفيذ

### 1) إضافة SDK والتهيئة (index.html)

* أضِف في `<head>` أو قبل إغلاق `<body>` نفس سكربتات Firebase (app و database *compat*) والتكوين (**firebaseConfig**) المستخدمة في نظام الإدارة، ثم `firebase.initializeApp(firebaseConfig)` ومرجع `const db = firebase.database();`.
* أنشئ دالة `getOrCreateDeviceId()`:

  * إذا كان `localStorage.deviceId` موجودًا أعده.
  * غير ذلك أنشئ UUID بسيطًا (مثلاً `${Date.now()}-${Math.random().toString(36).slice(2)}`)، خزِّنه محليًا وأعده.

### 2) شاشة الترحيب + مسار أول تشغيل

* أضِف Overlay/Modal أو صفحة فرعية داخل **index.html** اسمها `welcomeModal` تظهر **مرة واحدة فقط** إذا لم توجد علامة `localStorage.onboarded === '1'`.
* محتوى الترحيب يتضمن:

  * نبذة سريعة عن أقسام الكاشير (نقطة بيع/منتجات/فواتير/ديون/طابعة/إعدادات).
  * زر “ابدأ التسجيل” ينقل إلى “صفحة التسجيل”.
  * رابط “لديّ حساب مُسبق” يمكنه إغلاق الترحيب والانتقال مباشرة لصفحة إدخال رمز اشتراك لاحقًا.

### 3) صفحة تسجيل بيانات المستخدم (index.html)

* أنشئ **صفحة/مودال** اسمها `registrationModal` تحتوي حقول:

  * الاسم الكامل (مطلوب)
  * رقم الهاتف (مطلوب)
  * الدولة (مطلوب)
  * المدينة/المحافظة (مطلوب)
  * الشارع/العنوان التفصيلي (مطلوب)
  * حقل “ملاحظات/تفاصيل أخرى” (اختياري)
  * **بدون بريد إلكتروني**
* عند “حفظ”:

  1. احصل على `deviceId = getOrCreateDeviceId()`.
  2. أنشئ كائن المستخدم واحفظه مسار:
     `users/<deviceId>` بقيم مثل:

     ```json
     {
       "deviceId": "<deviceId>",
       "name": "...",
       "phone": "...",
       "country": "...",
       "city": "...",
       "street": "...",
       "notes": "...",
       "createdAt":  <timestamp>,
       "subscription": {
         "status": "inactive",           // inactive | active | expired | free
         "type":   null,                 // monthly | yearly | custom
         "start":  null,                 // ISO string
         "end":    null                  // ISO string
       }
     }
     ```
  3. عيِّن `localStorage.onboarded = '1'` حتى لا تظهر شاشة الترحيب مرة أخرى.
  4. أغلق التسجيل واعرض للمستخدم القسم الرئيسي.

> ملاحظة: لوحة الإدارة في **code-generator.html** تقرأ من `users` و`subscriptionCodes` بالفعل لأغراض الإحصائيات، لذلك ستبدأ بيانات المستخدم بالظهور هناك تلقائيًا بعد الحفظ.

### 4) ربط تفعيل الاشتراك من داخل الكاشير (index.html)

* لديك في إعدادات الكاشير حقول **“معلومات الاشتراك”** تتضمن `#subscriptionCode`, `#subStatus`, `#expiryDate` كما في واجهة الإعدادات. فعِّل الزر “تفعيل الاشتراك” ليتبع الخطوات:

#### دالة `activateSubscription()`:

1. اقرأ `inputCode` من الحقل. ارفض القيم الفارغة.
2. استعلم عن المسار: `subscriptionCodes/<code>`:

   * إذا **غير موجود** → أظهر خطأ “رمز غير صحيح”.
   * إذا موجود وافحص:

     * `used === true` → أظهر “الرمز مستخدم سابقًا”.
     * افحص النوع:

       * `type === "monthly"` → أيام = 30
       * `type === "yearly"`  → أيام = 365
       * `type === "custom"`  → استخدم `days` (عدد الأيام) المخزّن على الرمز
     * احسب `start = new Date()` و `end = start + days`.
3. حدّث الرمز:

   ```
   subscriptionCodes/<code> = {
     ...existingFields,
     used: true,
     usedBy: deviceId,
     usedAt: nowISO
   }
   ```
4. حدّث المستخدم:

   ```
   users/<deviceId>/subscription = {
     status: "active",
     type: code.type,
     start: startISO,
     end: endISO
   }
   ```
5. اعكس التغيير على الواجهة:

   * `#subStatus` → “نشط”
   * `#expiryDate` → `YYYY-MM-DD`
   * خزِّن نسخة محلية في LocalStorage (لتمكين العمل دون إنترنت).
6. أعرض إشعار نجاح.

> **مهم**: توجد لدى نظام الإدارة تجميعة إحصاءات تعتمد على قراءة `users` و`subscriptionEnd` وحقل `isFree` لتمييز “مجاني/نشط/منتهي” ضمن الإحصاء؛ حافظ على منطق قريب: استخدم `subscription.status`، ويمكنك أيضًا إضافة `isFree` عندما تمنح رموز مجانية مستقبلاً.

### 5) تحديث لوحة الإدارة (code-generator.html) (اختياري تحسين)

* أضف في “إدارة المشتركين/الكاشيرات” عمودًا/زرًا **“منح رمز”** يفتح Modal:

  * يحدد النوع (شهري/سنوي/مخصص) وعدد الأيام إن كان مخصصًا.
  * عند تأكيد، ينشئ `subscriptionCodes/<newCode>` بالحقول:

    ```
    {
      type: "monthly|yearly|custom",
      days: <number for custom>,
      createdAt: <timestamp>,
      used: false,
      assignedTo: <deviceId>,  // لتتبع من الرمز مخصص له
      note: "اختياري"
    }
    ```
  * يُظهر الكود لنسخه وإرساله للمستخدم.
* تأكد أن جداول “المشتركين/الكاشيرات” تُظهر: الاسم، الهاتف، الدولة/المدينة/الشارع، status/type/start/end (إن وُجدت)، و`deviceId` لتسهيل الإسناد.

### 6) عناصر الواجهة المطلوبة (index.html)

أضِف إلى الكاشير العناصر التالية (باختصار، يمكن حقنها في أسفل `body`):

* **Welcome Modal** (`#welcomeModal`) بزرّين:

  * “ابدأ التسجيل” → يفتح `#registrationModal`
  * “لاحقًا” → يغلقه (ويُبقي إمكانية تفعيل الاشتراك متاحة من صفحة الإعدادات)

* **Registration Modal** (`#registrationModal`) بحقوله المذكورة وزر “حفظ” يستدعي `submitRegistration()`.

* **Toast/Notification** عام لإظهار نجاح/خطأ.

* **ربط** زر “تفعيل الاشتراك” الموجود أصلًا في صفحة الإعدادات لاستدعاء `activateSubscription()` وتحديث `#subStatus` و`#expiryDate`.

### 7) وظائف جافاسكربت المقترحة (index.html)

أضِف/حدِّث الدوال التالية:

```html
<!-- Firebase SDKs (نفس الإصدارات compat كما في نظام الإدارة) -->
<script src="https://www.gstatic.com/firebasejs/9.22.0/firebase-app-compat.js"></script>
<script src="https://www.gstatic.com/firebasejs/9.22.0/firebase-database-compat.js"></script>
<script>
  // 1) استخدم نفس firebaseConfig الموجود في نظام الإدارة
  const firebaseConfig = {/* انسخ الإعدادات من النظام الإداري */}; // :contentReference[oaicite:10]{index=10}
  firebase.initializeApp(firebaseConfig);
  const db = firebase.database();

  // 2) جهاز/هوية محلية
  function getOrCreateDeviceId() {
    let id = localStorage.getItem('deviceId');
    if (!id) {
      id = `${Date.now()}-${Math.random().toString(36).slice(2)}`;
      localStorage.setItem('deviceId', id);
    }
    return id;
  }

  // 3) إظهار الترحيب لأول مرة
  function maybeShowWelcome() {
    if (localStorage.getItem('onboarded') === '1') return;
    document.getElementById('welcomeModal').classList.remove('hidden');
  }

  // 4) حفظ تسجيل المستخدم
  async function submitRegistration() {
    const name    = document.getElementById('regName').value.trim();
    const phone   = document.getElementById('regPhone').value.trim();
    const country = document.getElementById('regCountry').value.trim();
    const city    = document.getElementById('regCity').value.trim();
    const street  = document.getElementById('regStreet').value.trim();
    const notes   = document.getElementById('regNotes').value.trim();

    if (!name || !phone || !country || !city || !street) {
      showToast('يرجى تعبئة جميع الحقول المطلوبة'); return;
    }

    const deviceId = getOrCreateDeviceId();
    const payload = {
      deviceId, name, phone, country, city, street, notes,
      createdAt: new Date().toISOString(),
      subscription: { status: 'inactive', type: null, start: null, end: null }
    };

    await db.ref(`users/${deviceId}`).set(payload);
    localStorage.setItem('onboarded', '1');
    closeModal('registrationModal');
    showToast('تم حفظ بيانات التسجيل بنجاح');
  }

  // 5) تفعيل الاشتراك بواسطة رمز
  async function activateSubscription() {
    const code = document.getElementById('subscriptionCode').value.trim();
    if (!code) { showToast('أدخل رمز الاشتراك'); return; }

    const snap = await db.ref(`subscriptionCodes/${code}`).get();
    if (!snap.exists()) { showToast('رمز غير صحيح'); return; }

    const data = snap.val();
    if (data.used) { showToast('هذا الرمز مستخدم مسبقًا'); return; }

    let days = 0;
    if (data.type === 'monthly') days = 30;
    else if (data.type === 'yearly') days = 365;
    else if (data.type === 'custom') days = Number(data.days || 0);

    if (!days || days <= 0) { showToast('رمز غير صالح (عدد الأيام)'); return; }

    const start = new Date();
    const end   = new Date(start.getTime() + days*24*60*60*1000);
    const deviceId = getOrCreateDeviceId();

    // حدث الرمز
    await db.ref(`subscriptionCodes/${code}`).update({
      used: true,
      usedBy: deviceId,
      usedAt: new Date().toISOString()
    });

    // حدث المستخدم
    await db.ref(`users/${deviceId}/subscription`).set({
      status: 'active',
      type: data.type,
      start: start.toISOString(),
      end: end.toISOString()
    });

    // عكس على الواجهة + تخزين محلي
    document.getElementById('subStatus').textContent = 'نشط';
    document.getElementById('expiryDate').textContent = end.toISOString().slice(0,10);
    const settings = JSON.parse(localStorage.getItem('cashierSettings') || '{}');
    settings.subscription = { status: 'active', type: data.type, start: start.toISOString(), end: end.toISOString() };
    localStorage.setItem('cashierSettings', JSON.stringify(settings));

    showToast('تم تفعيل الاشتراك بنجاح');
  }

  // 6) أدوات واجهة بسيطة
  function showToast(msg) {
    // أنشئ ديف إشعار مؤقت أو استعمل الموجود لديك في النظام:contentReference[oaicite:11]{index=11}
    alert(msg);
  }
  function openModal(id){ document.getElementById(id).classList.remove('hidden'); }
  function closeModal(id){ document.getElementById(id).classList.add('hidden'); }

  // 7) التهيئة
  window.addEventListener('DOMContentLoaded', () => {
    getOrCreateDeviceId();
    maybeShowWelcome(); // إن لم يكن المستخدم أتمّ التسجيل
    // أبقِ بقية initSystem كما هي في الكاشير:contentReference[oaicite:12]{index=12}
  });
</script>
```

> استخدم نفس عناصر “معلومات الاشتراك” الموجودة لديك بالفعل في صفحة الإعدادات (مثل `#subStatus`, `#expiryDate`, `#subscriptionCode`) لتحديث الحالة بصريًا عند التفعيل.

### 8) قواعد الأمان (اقتراح)

* إن لم تكن قد أعددت **Firebase Rules** بعد، اقترح مبدئيًا:

```json
{
  "rules": {
    ".read": true,
    "users": {
      "$deviceId": {
        ".write": "auth == null",  // إذا لم تستخدم Auth حالياً
        ".read": true
      }
    },
    "subscriptionCodes": {
      ".read": true,
      "$code": {
        ".write": true  // مؤقتاً للسيرفر/الأدمن عبر لوحة الإدارة
      }
    }
  }
}
```

> لاحقًا احمِ الكتابة إلى `subscriptionCodes` و`users` وفقًا لآلية دخول آمن (Auth/role).

### 9) نقاط توسعة مستقبلية (اختياري)

* مزامنة اختيارات: تمكين خيار في الإعدادات “مزامنة سحابية” يرفع نسخة دورية من المنتجات والفواتير إلى `posData/<deviceId>/...`، مع بقاء العمل دون إنترنت.
* تمييز اشتراكات “مجانية” بإضافة `isFree: true` داخل `users/<deviceId>/subscription` (لو أردت مطابقة إحصاءات “الكاشيرات المجانية” الموجودة في لوحة الإدارة).

---

## التحقق بعد التنفيذ

1. افتح الكاشير على جهاز جديد → يجب ظهور شاشة الترحيب ثم صفحة التسجيل.
2. بعد الحفظ، افتح لوحة الإدارة → ابحث عن المستخدم الجديد داخل “المشتركين/الكاشيرات” وسترى بياناته (الاسم/الهاتف/العنوان…).
3. من لوحة الإدارة توليد/منح رمز (شهري/سنوي/مخصص) ثم أرسله للمستخدم.
4. في الكاشير أدخل الرمز → تتحول الحالة إلى “نشط” ويتحدّث تاريخ الانتهاء على الواجهة ويُحفظ في Firebase وLocalStorage.

---

## ملاحظات ربط بنيوية

* لوحة الإدارة تقرأ بالفعل من `users` و`subscriptionCodes` لحساب: إجمالي الرموز، المستخدمة/المتاحة، المشتركين، وحالات الكاشيرات (نشط/مجاني/منتهي) بالاعتماد على تاريخ الانتهاء والحقل `isFree` إن وُجد.
* الكاشير يمتلك بالفعل عناصر UI للاشتراك (حالة، تاريخ انتهاء، حقل رمز) داخل تبويب الإعدادات؛ استعملها بدلاً من إضافة عناصر مكررة.

---

## المصادر (ملفاتك)

* بنية وإحصائيات نظام الإدارة (قراءة `subscriptionCodes` و`users`).
* عناصر واجهة الاشتراك وحفظ الإعدادات المحليّة في الكاشير (الحقول والهوية البصرية وأقسام النظام).

> **مهم:** استخدم **نفس `firebaseConfig`** المُعرّف في نظام الإدارة داخل **index.html** حتى يتشاركا نفس قاعدة البيانات.
